// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/mchekalov/auth/internal/repository.AuthRepository -o auth_repository_minimock.go -n AuthRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/mchekalov/auth/internal/model"
)

// AuthRepositoryMock implements repository.AuthRepository
type AuthRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, userInfo *model.UserInfo) (up1 *model.UserID, err error)
	inspectFuncCreate   func(ctx context.Context, userInfo *model.UserInfo)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mAuthRepositoryMockCreate

	funcDelete          func(ctx context.Context, userID *model.UserID) (err error)
	inspectFuncDelete   func(ctx context.Context, userID *model.UserID)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mAuthRepositoryMockDelete

	funcGet          func(ctx context.Context, userID *model.UserID) (up1 *model.User, err error)
	inspectFuncGet   func(ctx context.Context, userID *model.UserID)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mAuthRepositoryMockGet

	funcUpdate          func(ctx context.Context, updateInfo *model.UpdateInfo) (err error)
	inspectFuncUpdate   func(ctx context.Context, updateInfo *model.UpdateInfo)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mAuthRepositoryMockUpdate
}

// NewAuthRepositoryMock returns a mock for repository.AuthRepository
func NewAuthRepositoryMock(t minimock.Tester) *AuthRepositoryMock {
	m := &AuthRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mAuthRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*AuthRepositoryMockCreateParams{}

	m.DeleteMock = mAuthRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*AuthRepositoryMockDeleteParams{}

	m.GetMock = mAuthRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*AuthRepositoryMockGetParams{}

	m.UpdateMock = mAuthRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*AuthRepositoryMockUpdateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthRepositoryMockCreate struct {
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockCreateExpectation
	expectations       []*AuthRepositoryMockCreateExpectation

	callArgs []*AuthRepositoryMockCreateParams
	mutex    sync.RWMutex
}

// AuthRepositoryMockCreateExpectation specifies expectation struct of the AuthRepository.Create
type AuthRepositoryMockCreateExpectation struct {
	mock    *AuthRepositoryMock
	params  *AuthRepositoryMockCreateParams
	results *AuthRepositoryMockCreateResults
	Counter uint64
}

// AuthRepositoryMockCreateParams contains parameters of the AuthRepository.Create
type AuthRepositoryMockCreateParams struct {
	ctx      context.Context
	userInfo *model.UserInfo
}

// AuthRepositoryMockCreateResults contains results of the AuthRepository.Create
type AuthRepositoryMockCreateResults struct {
	up1 *model.UserID
	err error
}

// Expect sets up expected params for AuthRepository.Create
func (mmCreate *mAuthRepositoryMockCreate) Expect(ctx context.Context, userInfo *model.UserInfo) *mAuthRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthRepositoryMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &AuthRepositoryMockCreateParams{ctx, userInfo}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.Create
func (mmCreate *mAuthRepositoryMockCreate) Inspect(f func(ctx context.Context, userInfo *model.UserInfo)) *mAuthRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by AuthRepository.Create
func (mmCreate *mAuthRepositoryMockCreate) Return(up1 *model.UserID, err error) *AuthRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &AuthRepositoryMockCreateResults{up1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the AuthRepository.Create method
func (mmCreate *mAuthRepositoryMockCreate) Set(f func(ctx context.Context, userInfo *model.UserInfo) (up1 *model.UserID, err error)) *AuthRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the AuthRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the AuthRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the AuthRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mAuthRepositoryMockCreate) When(ctx context.Context, userInfo *model.UserInfo) *AuthRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Set")
	}

	expectation := &AuthRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &AuthRepositoryMockCreateParams{ctx, userInfo},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.Create return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockCreateExpectation) Then(up1 *model.UserID, err error) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockCreateResults{up1, err}
	return e.mock
}

// Create implements repository.AuthRepository
func (mmCreate *AuthRepositoryMock) Create(ctx context.Context, userInfo *model.UserInfo) (up1 *model.UserID, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, userInfo)
	}

	mm_params := AuthRepositoryMockCreateParams{ctx, userInfo}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := AuthRepositoryMockCreateParams{ctx, userInfo}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("AuthRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the AuthRepositoryMock.Create")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, userInfo)
	}
	mmCreate.t.Fatalf("Unexpected call to AuthRepositoryMock.Create. %v %v", ctx, userInfo)
	return
}

// CreateAfterCounter returns a count of finished AuthRepositoryMock.Create invocations
func (mmCreate *AuthRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of AuthRepositoryMock.Create invocations
func (mmCreate *AuthRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mAuthRepositoryMockCreate) Calls() []*AuthRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to AuthRepositoryMock.Create")
	}
}

type mAuthRepositoryMockDelete struct {
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockDeleteExpectation
	expectations       []*AuthRepositoryMockDeleteExpectation

	callArgs []*AuthRepositoryMockDeleteParams
	mutex    sync.RWMutex
}

// AuthRepositoryMockDeleteExpectation specifies expectation struct of the AuthRepository.Delete
type AuthRepositoryMockDeleteExpectation struct {
	mock    *AuthRepositoryMock
	params  *AuthRepositoryMockDeleteParams
	results *AuthRepositoryMockDeleteResults
	Counter uint64
}

// AuthRepositoryMockDeleteParams contains parameters of the AuthRepository.Delete
type AuthRepositoryMockDeleteParams struct {
	ctx    context.Context
	userID *model.UserID
}

// AuthRepositoryMockDeleteResults contains results of the AuthRepository.Delete
type AuthRepositoryMockDeleteResults struct {
	err error
}

// Expect sets up expected params for AuthRepository.Delete
func (mmDelete *mAuthRepositoryMockDelete) Expect(ctx context.Context, userID *model.UserID) *mAuthRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthRepositoryMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &AuthRepositoryMockDeleteParams{ctx, userID}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.Delete
func (mmDelete *mAuthRepositoryMockDelete) Inspect(f func(ctx context.Context, userID *model.UserID)) *mAuthRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by AuthRepository.Delete
func (mmDelete *mAuthRepositoryMockDelete) Return(err error) *AuthRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &AuthRepositoryMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the AuthRepository.Delete method
func (mmDelete *mAuthRepositoryMockDelete) Set(f func(ctx context.Context, userID *model.UserID) (err error)) *AuthRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the AuthRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the AuthRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the AuthRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mAuthRepositoryMockDelete) When(ctx context.Context, userID *model.UserID) *AuthRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &AuthRepositoryMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &AuthRepositoryMockDeleteParams{ctx, userID},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.Delete return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockDeleteExpectation) Then(err error) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockDeleteResults{err}
	return e.mock
}

// Delete implements repository.AuthRepository
func (mmDelete *AuthRepositoryMock) Delete(ctx context.Context, userID *model.UserID) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, userID)
	}

	mm_params := AuthRepositoryMockDeleteParams{ctx, userID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := AuthRepositoryMockDeleteParams{ctx, userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("AuthRepositoryMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the AuthRepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, userID)
	}
	mmDelete.t.Fatalf("Unexpected call to AuthRepositoryMock.Delete. %v %v", ctx, userID)
	return
}

// DeleteAfterCounter returns a count of finished AuthRepositoryMock.Delete invocations
func (mmDelete *AuthRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of AuthRepositoryMock.Delete invocations
func (mmDelete *AuthRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mAuthRepositoryMockDelete) Calls() []*AuthRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthRepositoryMock.Delete")
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to AuthRepositoryMock.Delete")
	}
}

type mAuthRepositoryMockGet struct {
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockGetExpectation
	expectations       []*AuthRepositoryMockGetExpectation

	callArgs []*AuthRepositoryMockGetParams
	mutex    sync.RWMutex
}

// AuthRepositoryMockGetExpectation specifies expectation struct of the AuthRepository.Get
type AuthRepositoryMockGetExpectation struct {
	mock    *AuthRepositoryMock
	params  *AuthRepositoryMockGetParams
	results *AuthRepositoryMockGetResults
	Counter uint64
}

// AuthRepositoryMockGetParams contains parameters of the AuthRepository.Get
type AuthRepositoryMockGetParams struct {
	ctx    context.Context
	userID *model.UserID
}

// AuthRepositoryMockGetResults contains results of the AuthRepository.Get
type AuthRepositoryMockGetResults struct {
	up1 *model.User
	err error
}

// Expect sets up expected params for AuthRepository.Get
func (mmGet *mAuthRepositoryMockGet) Expect(ctx context.Context, userID *model.UserID) *mAuthRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthRepositoryMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &AuthRepositoryMockGetParams{ctx, userID}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.Get
func (mmGet *mAuthRepositoryMockGet) Inspect(f func(ctx context.Context, userID *model.UserID)) *mAuthRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by AuthRepository.Get
func (mmGet *mAuthRepositoryMockGet) Return(up1 *model.User, err error) *AuthRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &AuthRepositoryMockGetResults{up1, err}
	return mmGet.mock
}

// Set uses given function f to mock the AuthRepository.Get method
func (mmGet *mAuthRepositoryMockGet) Set(f func(ctx context.Context, userID *model.UserID) (up1 *model.User, err error)) *AuthRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the AuthRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the AuthRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the AuthRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mAuthRepositoryMockGet) When(ctx context.Context, userID *model.UserID) *AuthRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Set")
	}

	expectation := &AuthRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &AuthRepositoryMockGetParams{ctx, userID},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.Get return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockGetExpectation) Then(up1 *model.User, err error) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockGetResults{up1, err}
	return e.mock
}

// Get implements repository.AuthRepository
func (mmGet *AuthRepositoryMock) Get(ctx context.Context, userID *model.UserID) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, userID)
	}

	mm_params := AuthRepositoryMockGetParams{ctx, userID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := AuthRepositoryMockGetParams{ctx, userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("AuthRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the AuthRepositoryMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, userID)
	}
	mmGet.t.Fatalf("Unexpected call to AuthRepositoryMock.Get. %v %v", ctx, userID)
	return
}

// GetAfterCounter returns a count of finished AuthRepositoryMock.Get invocations
func (mmGet *AuthRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of AuthRepositoryMock.Get invocations
func (mmGet *AuthRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mAuthRepositoryMockGet) Calls() []*AuthRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to AuthRepositoryMock.Get")
	}
}

type mAuthRepositoryMockUpdate struct {
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockUpdateExpectation
	expectations       []*AuthRepositoryMockUpdateExpectation

	callArgs []*AuthRepositoryMockUpdateParams
	mutex    sync.RWMutex
}

// AuthRepositoryMockUpdateExpectation specifies expectation struct of the AuthRepository.Update
type AuthRepositoryMockUpdateExpectation struct {
	mock    *AuthRepositoryMock
	params  *AuthRepositoryMockUpdateParams
	results *AuthRepositoryMockUpdateResults
	Counter uint64
}

// AuthRepositoryMockUpdateParams contains parameters of the AuthRepository.Update
type AuthRepositoryMockUpdateParams struct {
	ctx        context.Context
	updateInfo *model.UpdateInfo
}

// AuthRepositoryMockUpdateResults contains results of the AuthRepository.Update
type AuthRepositoryMockUpdateResults struct {
	err error
}

// Expect sets up expected params for AuthRepository.Update
func (mmUpdate *mAuthRepositoryMockUpdate) Expect(ctx context.Context, updateInfo *model.UpdateInfo) *mAuthRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthRepositoryMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &AuthRepositoryMockUpdateParams{ctx, updateInfo}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.Update
func (mmUpdate *mAuthRepositoryMockUpdate) Inspect(f func(ctx context.Context, updateInfo *model.UpdateInfo)) *mAuthRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by AuthRepository.Update
func (mmUpdate *mAuthRepositoryMockUpdate) Return(err error) *AuthRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &AuthRepositoryMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the AuthRepository.Update method
func (mmUpdate *mAuthRepositoryMockUpdate) Set(f func(ctx context.Context, updateInfo *model.UpdateInfo) (err error)) *AuthRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the AuthRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the AuthRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the AuthRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mAuthRepositoryMockUpdate) When(ctx context.Context, updateInfo *model.UpdateInfo) *AuthRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Set")
	}

	expectation := &AuthRepositoryMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &AuthRepositoryMockUpdateParams{ctx, updateInfo},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.Update return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockUpdateExpectation) Then(err error) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockUpdateResults{err}
	return e.mock
}

// Update implements repository.AuthRepository
func (mmUpdate *AuthRepositoryMock) Update(ctx context.Context, updateInfo *model.UpdateInfo) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, updateInfo)
	}

	mm_params := AuthRepositoryMockUpdateParams{ctx, updateInfo}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := AuthRepositoryMockUpdateParams{ctx, updateInfo}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("AuthRepositoryMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the AuthRepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, updateInfo)
	}
	mmUpdate.t.Fatalf("Unexpected call to AuthRepositoryMock.Update. %v %v", ctx, updateInfo)
	return
}

// UpdateAfterCounter returns a count of finished AuthRepositoryMock.Update invocations
func (mmUpdate *AuthRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of AuthRepositoryMock.Update invocations
func (mmUpdate *AuthRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mAuthRepositoryMockUpdate) Calls() []*AuthRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthRepositoryMock.Update")
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to AuthRepositoryMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockUpdateInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockUpdateDone()
}
